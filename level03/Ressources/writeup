The program will take an input, substract it from 0x1337d00d and test if the result is less than 0x15.
If it's the case, it will do a bitwise operation on it to craft an address and jump there. In fact this operation doesn't matter, we just need a result not too little nor too big in order to stay inside the list of addresses already in memory.

In all cases, the decrypt function will be called with the same arguments.

This function have a 16 unsigned char string in memory, will do a XOR on each unsigned char and compare it with "Congratulations!". If both strings are the same, it will call system("/bin/sh").
The 16 unsigned char string in memory is this one (python notation):
"\x51\x7d\x7c\x75\x60\x73\x66\x67\x7e\x73\x66\x7b\x7d\x7c\x61\x33"

We just have to do a XOR between any character and the one which has the same index in "Congratulations!" and we will have the number we need to pass to decrypt.
>>> hex(0x51 ^ 0x43)
'0x12'
>>> 0x12
18
>>> 0x1337d00d - 18
322424827

The input we need to pass to the program is: 322424827.

level03@OverRide:~$ ./level03 
***********************************
*               level03         **
***********************************
Password:322424827
$ cat /home/users/level04/.pass
kgv3tkEb9h2mLkRsPkXRfc2mHbjMxQzvb2FrgKkf
